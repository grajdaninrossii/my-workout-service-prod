from typing import List
import random
import asyncio

from repositories import dish_repo, user_repo
from models import async_session, User
from config.logger import logging
from keyboards.keyboard_buttons import SelectFoodButtons
from utils import loop


async def get_dish_list() -> list:
    async with async_session() as session:
        dish_list_tuple = await dish_repo.get_all_dishes(session)
        dish_list = [list(x) for x in dish_list_tuple]
    return dish_list


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Ü–∏–æ–Ω–∞ –Ω–∞ –¥–µ–Ω—å
async def get_day_ration(user_id: int)  -> str:
    async with async_session() as session:
        type_dish_goal_id_1 = [
            SelectFoodButtons.breakfast,
            SelectFoodButtons.bite,
            SelectFoodButtons.lunch,
            SelectFoodButtons.snack,
            SelectFoodButtons.dinner,
            SelectFoodButtons.before_sleep
        ]
        type_dish_other_goal = [
            SelectFoodButtons.breakfast,
            SelectFoodButtons.lunch,
            SelectFoodButtons.snack,
            SelectFoodButtons.dinner
        ]
        current_user: User = await user_repo.get_one_user(session, user_id)

    dish_types = type_dish_other_goal
    if (current_user.goal_id == 1):
        dish_types = type_dish_goal_id_1
    ration = '–†–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å:\n'
    for type_dish in dish_types:
        ration = ration + await get_one_ration(
            user_id=user_id,
            str_meal=type_dish,
        ) + '\n'
    return ration


# –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Ü–∏–æ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫
# str_meal: str = {"–∑–∞–≤—Ç—Ä–∞–∫", "–ø–µ—Ä–µ–∫—É—Å", "–æ–±–µ–¥", "–ø–æ–ª–¥–Ω–∏–∫", "—É–∂–∏–Ω", "–ø–µ—Ä–µ–¥ —Å–Ω–æ–º"}
async def get_one_ration(user_id: int, str_meal: str)  -> str:
    async with async_session() as session:
        current_user: User = await user_repo.get_one_user(session, user_id)
        gender_id = current_user.gender_id
        goal_id = current_user.goal_id
        age = current_user.age
        weight = current_user.weight
        height = current_user.height
        count_train_by_week = 3

        needKPFC = await getKPFC(gender_id, goal_id, age, weight, height, count_train_by_week)

        match str_meal:
            case SelectFoodButtons.breakfast:
                type_meals = [[9,3], [4,9], [9]] # –†–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç–∏ –∑–∞–≤—Ç—Ä–∞–∫–æ–≤ –ø–æ —Ç–∏–ø—É (1+2+3 –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±–ª—é–¥ / 1+4 –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±–ª—é–¥ –∏ —Ç–¥)
                PERCENT_KCAL = 0.1
                PERCENT_PROTEINS = 0.1
                PERCENT_FATS = 0.1
                PERCENT_CARBOHYDRATES = 0.1
                PERCENT_ERROR = 0.04
                title = '–ó–∞–≤—Ç—Ä–∞–∫ ü•™:'
            case SelectFoodButtons.bite:
                type_meals = [[11], [11], [11, 4], [2,4]]
                PERCENT_KCAL = 0.1
                PERCENT_PROTEINS = 0.15
                PERCENT_FATS = 0.15
                PERCENT_CARBOHYDRATES = 0.15
                PERCENT_ERROR = 0.05
                title = '–ü–µ—Ä–µ–∫—É—Å ü•õ:'
            case SelectFoodButtons.lunch:
                type_meals = [[5, 2, 1, 3], [5,2,3], [5,2,1], [5,1], [5,3,6], [5,1,7], [10,3,2]]
                PERCENT_KCAL = 0.25
                PERCENT_PROTEINS = 0.25
                PERCENT_FATS = 0.25
                PERCENT_CARBOHYDRATES = 0.25
                PERCENT_ERROR = 0.05
                title = '–û–±–µ–¥ üçù:'
            case SelectFoodButtons.snack:
                type_meals = [[4], [2,3], [4,3]]
                PERCENT_KCAL = 0.15
                PERCENT_PROTEINS = 0.15
                PERCENT_FATS = 0.15
                PERCENT_CARBOHYDRATES = 0.15
                PERCENT_ERROR = 0.05
                title = '–ü–æ–ª–¥–Ω–∏–∫ üç∂:'
            case SelectFoodButtons.dinner:
                type_meals = [[8,1,3], [8,1,3], [0,1,3], [0,1,2,3], [10,2,3], [10,3], [10,2,3,6], [0,1,2,6]]
                PERCENT_KCAL = 0.25
                PERCENT_PROTEINS = 0.25
                PERCENT_FATS = 0.25
                PERCENT_CARBOHYDRATES = 0.25
                PERCENT_ERROR = 0.05
                title = '–£–∂–∏–Ω ü´ï:'
            case SelectFoodButtons.before_sleep:
                type_meals = [[11, 9], [4]]
                PERCENT_KCAL = 0.15
                PERCENT_PROTEINS = 0.1
                PERCENT_FATS = 0.1
                PERCENT_CARBOHYDRATES = 0.1
                PERCENT_ERROR = 0.04
                title = '–ü–µ—Ä–µ–¥ —Å–Ω–æ–º üçµ:'


        typeMeal = random.choice(type_meals) # –†–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Ü–∏–æ–Ω
        listRation = await getPartDayRation(typeMeal=typeMeal, dishList = dish_list, needKCal=PERCENT_KCAL*needKPFC[0], needProtein=PERCENT_PROTEINS*needKPFC[1], 
                                            needFats=PERCENT_FATS*needKPFC[2], needCarbohydrates=PERCENT_CARBOHYDRATES*needKPFC[3], percentError=PERCENT_ERROR)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≤—Ç—Ä–∞–∫–æ–º
        ration = title
        for dish in listRation:
            if (dish[8] > 0):
                ration += f"\n ‚Ä¢ {dish[1]} - {dish[8]} {'—à—Ç' if dish[6]==1 else '–≥'}"
    return ration


#–§—É–Ω–∫—Ü–∏—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Ü–∏–æ–Ω–∞ –Ω–∞ —á–∞—Å—Ç—å –¥–Ω—è (–∑–∞–≤—Ç—Ä–∞–∫/–æ–±–µ–¥/—É–∂–∏–Ω –∏ —Ç–¥)
async def getPartDayRation(typeMeal: List, dishList: List, needKCal: float, needProtein: float, needFats: float, needCarbohydrates: float, percentError: float) -> List:
    #–ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –ø—É–Ω–∫—Ç—É –∑–∞–≤—Ç—Ä–∞–∫–∞ 1), 2), 3) –∏ —Ç–¥, —Ñ–æ—Ä–º–∏—Ä—É—è —Ä–∞—Ü–∏–æ–Ω listRation –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫
    listRation = []
    for category in typeMeal:
        dishFromCategory = random.choice(list(filter(lambda dish: dish[7]==category, dishList)))
        listRation.append(dishFromCategory)

    #–°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–≥—Ä–∞–º–º–æ–≤–∫—É
    await stabilizeByParametrs(listRation=listRation, needKCal=needKCal, needProtein=needProtein, needFats=needFats, needCarbohydrates=needCarbohydrates, percentError=percentError)

    return listRation


# #–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Ü–∏–æ–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é
# async def getWeekRation(gender_id: int, goal_id: int, age: int, weight: float, height: float, countTrainByWeek: int)  -> str:
#     resultStr: str = ""
#     for i in range(7):
#         resultStr += f"–î–µ–Ω—å {i+1}\n{getDayRation(gender_id, goal_id, age, weight, height, countTrainByWeek)}\n--------\n"
#     return resultStr


# –ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∫–∫–∞–ª –∏–ª–∏ –ë–ñ–£)
async def getSumByParametr(listRation: List, indexParametr: int) -> float:
    sumParametr = 0
    for dish in listRation:
        sumParametr += dish[indexParametr]*dish[8]/(100.0, 1.0)[dish[6]==1]

    return sumParametr


# –ú–µ—Ç–æ–¥ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Ü–∏–æ–Ω–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É (–ø–æ–¥–≥–æ–Ω—è–µ—Ç –º–∞—Å—Å—É –±–ª—é–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ )
async def stabilizeByParametr(listRation: List, indexParametr: int, needParametr: float, percentError: float):

            MAX_COUNT_WHILE = 3                         # –ß–∏—Å–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –¥–æ–±–∞–≤–æ–∫/—É–±–∞–≤–æ–∫ –º–∞—Å—Å—ã –∑–∞ –æ–¥–Ω—É —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é
            COUNT_RANDOM_DISH_FOR_INCREMENT_CHOICE = 5  # –°—Ä–µ–¥–∏ —Å–∫–æ–ª—å–∫–∏—Ö —Å–∞–º—ã—Ö –∫–∞–ª–ª–æ—Ä–∏–π–Ω—ã—Ö –±–ª—é–¥ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω –≤—ã–±–æ—Ä –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–∫–∫–∞–ª)
            VALUE_ADD_DELETE_WEIGHT_1 = 1               # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–∫–∏/—É–±–∞–≤–∫–∏ (–ø–æ—à—Ç—É—á–Ω–æ)
            VALUE_ADD_DELETE_WEIGHT_2 = 100             # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–∫–∏/—É–±–∞–≤–∫–∏ (–ø–æ–≥—Ä–∞–º–º–æ–≤–æ)
            # VALUE_ADD_DELETE_WEIGHT_2 = 50            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–∫–∏/—É–±–∞–≤–∫–∏ (–ø–æ–≥—Ä–∞–º–º–æ–≤–æ)


            sumParametr = await getSumByParametr(listRation, indexParametr)
            arrayIndexMaxParametrProduct = await getIndexesRowByMaxColumn(listRation, indexParametr)


            #–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–∫–∞–ª
            countWhile=0
            while (sumParametr < (1-percentError)*needParametr):
                #–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
                if (countWhile >= MAX_COUNT_WHILE):
                    break

                #indexMaxProduct = arrayIndexMaxParametrProduct[random.randint(0,COUNT_RANDOM_DISH_FOR_INCREMENT_CHOICE+1)] #–ò–Ω–¥–µ–∫—Å —Å–∞–º–æ–≥–æ –∫–∞–ª–ª–æ—Ä–∏–π–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                indexMaxProduct = arrayIndexMaxParametrProduct[random.randint(0,COUNT_RANDOM_DISH_FOR_INCREMENT_CHOICE+1 if len(listRation)>=COUNT_RANDOM_DISH_FOR_INCREMENT_CHOICE+1 else len(listRation)-1)] #–ò–Ω–¥–µ–∫—Å —Å–∞–º–æ–≥–æ –∫–∞–ª–ª–æ—Ä–∏–π–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                if (listRation[indexMaxProduct][6] == 1):
                    if (listRation[indexMaxProduct][8] < listRation[indexMaxProduct][9]):
                        listRation[indexMaxProduct][8] += VALUE_ADD_DELETE_WEIGHT_1
                else:
                    if (listRation[indexMaxProduct][8] < listRation[indexMaxProduct][9]):
                        listRation[indexMaxProduct][8] += VALUE_ADD_DELETE_WEIGHT_2
                countWhile+=1

            countWhile=0
            while (sumParametr > (1+percentError)*needParametr):
                #–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
                if (countWhile >= MAX_COUNT_WHILE):
                    break

                #–í—ã–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∞–º—ã–µ –º–æ—â–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –º–∏–Ω—É—Å–æ–≤–∞–ª–∏ –º–∞—Å—Å—É –∏ —Ç–∞–º –≤—ã—à–µ–ª –Ω–æ–ª—å)
                indexMaxNotNullProduct = 0
                for currentIndex in arrayIndexMaxParametrProduct:
                    if (listRation[currentIndex][8] > VALUE_ADD_DELETE_WEIGHT_2):
                        indexMaxNotNullProduct = currentIndex
                        break
                #print("–£–º–µ–Ω—å—à–∞–µ–º –∫–∫–∞–ª: ", listRation[indexMaxNotNullProduct])

                #addWeight = round((sumKCal - needKPFC[0]) / listRation[indexMaxNotNullProduct][2]) #–°–∫–æ–ª—å–∫–æ –ø–æ—Ä—Ü–∏–π 100–≥/—à—Ç –µ—â–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
                if (listRation[indexMaxNotNullProduct][6] == 1):
                    listRation[indexMaxNotNullProduct][8] -= VALUE_ADD_DELETE_WEIGHT_1
                    if (listRation[indexMaxNotNullProduct][8] < VALUE_ADD_DELETE_WEIGHT_1):
                        listRation[indexMaxNotNullProduct][8] = VALUE_ADD_DELETE_WEIGHT_1
                else:
                    listRation[indexMaxNotNullProduct][8] -= VALUE_ADD_DELETE_WEIGHT_2
                    if (listRation[indexMaxNotNullProduct][8] < VALUE_ADD_DELETE_WEIGHT_2):
                        listRation[indexMaxNotNullProduct][8] = VALUE_ADD_DELETE_WEIGHT_2
                    #–ù–µ–±–æ–ª—å—à–∞—è —Ñ–∏—á–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º—è—Å–∞ - (–∫–∞—Ç–µ–≥–æ—Ä–∏—è 1)
                    if (listRation[indexMaxNotNullProduct][8] < 100 and listRation[indexMaxNotNullProduct][7]==1):
                        listRation[indexMaxNotNullProduct][8] = 100
                countWhile+=1


#–ú–µ—Ç–æ–¥ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–ª–æ—Ä–∏—è–º –∏ –±–µ–ª–∫–∞–º (–∂–∏—Ä–∞–º –∏ —É–≥–ª–µ–≤–æ–¥–∞–º - –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º) N —Ä–∞–∑
async def stabilizeByParametrs(listRation: List, needKCal: float, needProtein: float, needFats: float, needCarbohydrates: float, percentError: float):
    N_STAB = 12 #–ß–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–π

    #–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –º–∞—Å—Å—É —Ä–∞—Ü–∏–æ–Ω–∞
    for i in range(N_STAB):

        #–°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∫–∞–ª
        await stabilizeByParametr(listRation, 2, needKCal, percentError)

        #–°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–æ –±–µ–ª–∫–∞–º
        await stabilizeByParametr(listRation, 3, needProtein, percentError)


#–ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç—Ä–æ–∫ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–æ–ª–±—Ü—É indexColumn –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
async def getIndexesRowByMaxColumn(arrayRation, indexColumn: int) -> List[int]:
    copyArrayRation = arrayRation.copy()
    copyArrayRation.sort(key=lambda x: x[indexColumn], reverse=True)
    arrayIndexes = []
    for dish in copyArrayRation:
        arrayIndexes.append(arrayRation.index(dish))

    return arrayIndexes


#–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–ª–æ—Ä–∏–π –∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤
async def getKPFC(gender_id: int, goal_id: int, age: int, weight: float, height: float, countTrainByWeek: int) -> List[float]:
    kcal: float = 0 #–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —á–∏—Å–ª–æ –∫–∞–ª–ª–æ—Ä–∏–π

    #–ö–∞–ª–ª–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–æ—Ä–º—ã
    KFA: float = await getKFA(countTrainByWeek)
    if (gender_id == 1):
        #–ú—É–∂—á–∏–Ω–∞
        kcal = KFA * (66.5 + (13.75 * weight) + (5.003 * height) - (6.775 * age))
    elif (gender_id == 2):
        #–ù–µ –º—É–∂—á–∏–Ω–∞
        kcal = KFA * (655.1 + (9.563 * weight) + (1.85 * height) - (4.676 * age))

    #–ü–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –∫–∞–ª–ª–æ—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    if (goal_id == 1):
        #–ù–∞–±–æ—Ä –º–∞—Å—Å—ã
        kcal *= 1.2
        proteins = weight*1.5
        return [kcal, proteins, proteins/0.375*0.2, proteins/0.375*0.425]
    elif (goal_id == 2 or goal_id == 3):
        #–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –º–∞—Å—Å—ã –∏ –≥–∏–±–∫–æ—Å—Ç—å
        proteins = weight*0.8
        return [kcal, proteins, proteins, proteins/0.3*0.4]
    elif (goal_id == 4):
        #–°–∏–ª—å–Ω–µ–µ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–µ–µ
        kcal *= 1.05
        proteins = 0.95*weight
        return [kcal, proteins, proteins, proteins/0.225*0.55]


#–§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–∞–ª–ª–æ—Ä–∏–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–æ—Ä–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é
async def getKFA(countTrainByWeek: int) -> float:
    result: float = 1.2

    if countTrainByWeek == 0:
        result = 1.2
    elif countTrainByWeek <= 2:
        result = 1.375
    elif countTrainByWeek <= 4:
        result = 1.55
    elif countTrainByWeek <= 7:
        result = 1.7
    else:
        result = 1.9

    return result


dish_list = loop.run_until_complete(get_dish_list())